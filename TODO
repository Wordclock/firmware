- Cleanup: This includes various things, e.g. removing unused code and/or 
  variables as well as documenting the source code extensively. The current
  documentation is full of misspellings and a mix of English and German.

    Files left:
        - display_wc_ger3.c
        - display_wc_ger3.h
        - user.c
        - user.h
        - usermodes.c

- Cross-Read and correct comments. Finished files:
        - dcf77.h
        - dcf77.c
        - datetime.h
        - base.c
        - base.h
        - shift.c
        - shift.h
        - ldr.c
        - ldr.h

- Log output of DCF77 is buggy as the same timings are output various time,
  although internally nothing changed (check boundaries for fix), see below:
  
        low active DCF77 Module detected!
         45  88  78  88  79  89  88  89  88  78  78  88  78  77  78  89  88
         89  78  89  78  88  78  78  88  88  89  78  78  89  88  89  88  88
         88  88  78  89  89  89  78  88  78  88  78  78  89  88  89  88  78
         78  88  88  77  77  77  77  77  77  77  77  77  77  77  77  77 165
         165 165 165 165 165 165 165 165 165 165 165 165 253 DCF77 Reset
         88 189 DCF77 Reset
         89  78  78  88  78  78  88  78  88  78  79  78  78  78  78  88  88
         89  79  88  78  78  78  78  88  88  87  78  89  89  88  88  88  88
         88  87  78  88  88  88  78  88  78  88  78  79  89  88  89  88  78
         78  88  88  78  88  89  89 189  1st DCF77 correct
        DCF77 Reset
         88  88  77  78  78  89  88  78  88  78  88  78  88  88  89  89  88
         88  78  88  78  88  88  89  78  88  89  78  89  88  88  88  89  89
         88  89  78  89  88  88  78  88  78  88  78  79  89  88  89  89  78
         78  88  88  78  88  88  88 189  2nd DCF77 correct
        DCF77 Reset

- Log output of DCF77 is _ugly_. There are two spaces between each output,
  the lines get really long. Lines shouldn't get longer than 80 characters.

- Ambilight enable/disable times: Just like the clock itself there should
  be an option to enable and/or disable the ambilight depending on the
  time, so it can be activated in the evening.

- Rename i2c modules to appropriate TWI modules. AVR calls this protocol
  consequently TWI instead of I2C due to legal concers. Furthermore the header
  file provided by avr-libc is also called "twi.h", so it makes more sense
  to rename these modules. Moreover some rework is needed to make (more) use
  of "twi.h".

- Use macros for port definitions provided by ports.h

- Make the determination of the DCF77 module type optional. Although this is
  a nice gimmick, it only takes up program space and doesn't provide any real
  use, as the module type should be known when actually building the clock
  (basically all DCF77 receiver have an inverted output anyway), so it can be
  compiled with the support for the right module, which in return would save
  some considerable amount of program space and fasten up the initialization.

- Fix header includes: It seems that various includes are actually not needed.

- dcf77.h: Instead of dynamically building the header depending on the value
  of DCF_PRESENT it actually would make more sense to not include the file
  in the first place, when the DCF77 functionality is not needed.

- wceeprom: Use interrupt driven approach for writing data into EEPROM. Right
  now it is quite possible that interrupts will be missed as writing to 
  EEPROM takes quite some time.

- wceeprom: Make it possible to let WcEepromData get bigger than 254 byte.

- Specify some coding styles for contributers, which will be based upon the
  K&R indent style

- Refactor/Rewrite wceeprom.c: The function wcEeprom_writeIfChanged() in its
  current form doesn't make too much sense. This could easily be included
  into wcEeprom_writeback(), which would save some space and make things
  not look more complicated than they actually are.

- pwm.c: pwm_modifyLdrBrightness2pwmStep(): The indication for applying the
  settings successfully should not be part of the function itself, but moved
  to user.c.

- color: Check whether HUE_MANUAL_STEPS is really needed or whether it should
  be outsourced to usermodes.c itself, as it is only used there anyway and at
  first glance it doesn't make too much sense to define something like this
  "globally".

- color: Check whether the conditional compilation (MONO_COLOR_CLOCK) is really
  needed or if it would make more sense to not include it in the first place
  when dealing with monochromatic clocks.

- color: Make hueWaveform() more general with a 2nd parameter asking for the
  color, so its not working with green only.

- Define and implement an UART protocol to control the Wordclock. This could
  then be used for a smartphone application or something similar like that.

- Replace UART module with an interrupt based one, e.g. UART-avr
  (https://gitorious.org/johnpatcher/uart-avr)

- Add support for motion sensors, so that the Wordclock can be disabled and
  will enable itself once there is someone in the surrounding.

- display.h: DisplayState: Move type declaration to specific clock definitions

- display.h: displayParams: Consider creating access functions

- Combine display.* and display_wc.* files, as there is only a single
  display type (wc), due to the fact that the display type "tix" has
  been removed in the past.
  
- The whole conditional inclusion process within the display module is an ugly
  hack. This should be done right by including only the file actually needed,
  e.g. "display_wc_ger3.h" where ever functions of this file are needed. This
  file should then in return include other files, e.g. "display.h", if needed.

- Demo mode: When switching from the multiplexing demo mode into the classical
  one, the brightness seems to be at a maximum, although it wasn't before
  entering this mode.

- display.c: Check whether it would be possible to output the current display
  state only once, when the fading is completed, so the ISR doesn't block the
  controller without doing anything useful.

- display_wc_ger3.c:
- display_wc_eng.c:
- display_wc_ger.c:
    - Make PROGMEM if more RAM is needed (+10B PROGMEM)

- display_wc_eng.c:
- display_wc_ger.c:
    - Make more flexible
    - Consider to put translationmatrix to flash
	
- display.h: display_getNumberDisplayState() Add indicator once the counter
  wraps around. The minute LEDs can be used, so the range covered can be four
  times as big (1, 2, 3 or 4 minute LEDs enabled). This would make it possible
  to display ranges from 1 to 48.
