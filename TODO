- Cleanup: This includes various things, e.g. removing unused code and/or 
  variables as well as documenting the source code extensively. The current
  documentation is full of misspellings and a mix of English and German.

- Log output of DCF77 is buggy as the same timings are output various time,
  although internally nothing changed, see below:
  
        low active DCF77 Module detected!
         45  88  78  88  79  89  88  89  88  78  78  88  78  77  78  89  88
         89  78  89  78  88  78  78  88  88  89  78  78  89  88  89  88  88
         88  88  78  89  89  89  78  88  78  88  78  78  89  88  89  88  78
         78  88  88  77  77  77  77  77  77  77  77  77  77  77  77  77 165
         165 165 165 165 165 165 165 165 165 165 165 165 253 DCF77 Reset
         88 189 DCF77 Reset
         89  78  78  88  78  78  88  78  88  78  79  78  78  78  78  88  88
         89  79  88  78  78  78  78  88  88  87  78  89  89  88  88  88  88
         88  87  78  88  88  88  78  88  78  88  78  79  89  88  89  88  78
         78  88  88  78  88  89  89 189  1st DCF77 correct
        DCF77 Reset
         88  88  77  78  78  89  88  78  88  78  88  78  88  88  89  89  88
         88  78  88  78  88  88  89  78  88  89  78  89  88  88  88  89  89
         88  89  78  89  88  88  78  88  78  88  78  79  89  88  89  89  78
         78  88  88  78  88  88  88 189  2nd DCF77 correct
        DCF77 Reset

- Log output of DCF77 is _ugly_. There are two spaces between each output,
  the lines get really long. Lines shouldn't get longer than 80 characters.

- Ambilight (sometimes?) enables itself after it was manually disabled.

- Ambilight enable/disable times: Just like the clock itself there should
  be an option to enable and/or disable the ambilight depending on the
  time, so it can be activated in the evening.

- Right now "enable_dcf77_ISR" is used to indicate whether or not the DCF77
  module is "enabled". Maybe this should be reworked so there are functions
  called dcf77_enable() and dcf77_disable(), which could be called instead
  of setting the flag directly to true and/or false.

- i2c-master: For whatever reason negative logic is used in various functions,
  e.g. i2c_master_start() returns true (1) if the access to the device fails.
  This is confusing as everywhere else in this project "normal" logic is used.

- Rename i2c modules to appropriate TWI modules. AVR calls this protocol
  consequently TWI instead of I2C due to legal concers. Furthermore the header
  file provided by avr-libc is also called "twi.h", so it makes more sense
  to rename these modules. Moreover some rework is needed to make (more) use
  of "twi.h".

- Use macros for port definitions provided by ports.h

- Make the determination of the DCF77 module type optional. Although this is
  a nice gimmick, it only takes up program space and doesn't provide any real
  use, as the module type should be known when actually building the clock,
  so it can be compiled with the support for the right module, which in return
  would save some program space and fasten up the initialization.
