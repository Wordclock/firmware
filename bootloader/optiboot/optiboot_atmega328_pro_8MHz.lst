
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000028  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000074  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003db  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ea  00000000  00000000  000006df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000042b  00000000  00000000  000008c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000172  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002d7  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    7e00:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7e02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart(ch);
    7e06:	81 fd       	sbrc	r24, 1
    7e08:	01 c0       	rjmp	.+2      	; 0x7e0c <main+0xc>
    7e0a:	ed d0       	rcall	.+474    	; 0x7fe6 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e0c:	85 e0       	ldi	r24, 0x05	; 5
    7e0e:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7e12:	82 e0       	ldi	r24, 0x02	; 2
    7e14:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7e18:	88 e1       	ldi	r24, 0x18	; 24
    7e1a:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7e1e:	86 e0       	ldi	r24, 0x06	; 6
    7e20:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e24:	88 e0       	ldi	r24, 0x08	; 8
    7e26:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    7e2a:	8e e0       	ldi	r24, 0x0E	; 14
    7e2c:	c6 d0       	rcall	.+396    	; 0x7fba <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e2e:	25 9a       	sbi	0x04, 5	; 4
    7e30:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e32:	28 e1       	ldi	r18, 0x18	; 24
    7e34:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    7e36:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e38:	30 93 85 00 	sts	0x0085, r19
    7e3c:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7e40:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e42:	b0 9b       	sbis	0x16, 0	; 22
    7e44:	fe cf       	rjmp	.-4      	; 0x7e42 <main+0x42>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e46:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e48:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e4a:	81 50       	subi	r24, 0x01	; 1
    7e4c:	a9 f7       	brne	.-22     	; 0x7e38 <main+0x38>
    7e4e:	aa 24       	eor	r10, r10
    7e50:	bb 24       	eor	r11, r11
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7e52:	33 e0       	ldi	r19, 0x03	; 3
    7e54:	83 2e       	mov	r8, r19
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e56:	77 24       	eor	r7, r7
    7e58:	73 94       	inc	r7
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7e5a:	25 e0       	ldi	r18, 0x05	; 5
    7e5c:	92 2e       	mov	r9, r18
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7e5e:	91 e1       	ldi	r25, 0x11	; 17
    7e60:	c9 2e       	mov	r12, r25
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e62:	9f d0       	rcall	.+318    	; 0x7fa2 <getch>

    if(ch == STK_GET_PARAMETER) {
    7e64:	81 34       	cpi	r24, 0x41	; 65
    7e66:	61 f4       	brne	.+24     	; 0x7e80 <main+0x80>
      unsigned char which = getch();
    7e68:	9c d0       	rcall	.+312    	; 0x7fa2 <getch>
    7e6a:	18 2f       	mov	r17, r24
      verifySpace();
    7e6c:	ac d0       	rcall	.+344    	; 0x7fc6 <verifySpace>
      if (which == 0x82) {
    7e6e:	12 38       	cpi	r17, 0x82	; 130
    7e70:	29 f1       	breq	.+74     	; 0x7ebc <main+0xbc>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    7e72:	11 38       	cpi	r17, 0x81	; 129
    7e74:	11 f4       	brne	.+4      	; 0x7e7a <main+0x7a>
	  putch(OPTIBOOT_MAJVER);
    7e76:	86 e0       	ldi	r24, 0x06	; 6
    7e78:	01 c0       	rjmp	.+2      	; 0x7e7c <main+0x7c>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7e7a:	83 e0       	ldi	r24, 0x03	; 3
    7e7c:	8a d0       	rcall	.+276    	; 0x7f92 <putch>
    7e7e:	86 c0       	rjmp	.+268    	; 0x7f8c <main+0x18c>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7e80:	82 34       	cpi	r24, 0x42	; 66
    7e82:	11 f4       	brne	.+4      	; 0x7e88 <main+0x88>
      // SET DEVICE is ignored
      getNch(20);
    7e84:	84 e1       	ldi	r24, 0x14	; 20
    7e86:	03 c0       	rjmp	.+6      	; 0x7e8e <main+0x8e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7e88:	85 34       	cpi	r24, 0x45	; 69
    7e8a:	19 f4       	brne	.+6      	; 0x7e92 <main+0x92>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e8c:	85 e0       	ldi	r24, 0x05	; 5
    7e8e:	a3 d0       	rcall	.+326    	; 0x7fd6 <getNch>
    7e90:	7d c0       	rjmp	.+250    	; 0x7f8c <main+0x18c>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7e92:	85 35       	cpi	r24, 0x55	; 85
    7e94:	79 f4       	brne	.+30     	; 0x7eb4 <main+0xb4>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7e96:	85 d0       	rcall	.+266    	; 0x7fa2 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7e98:	e8 2e       	mov	r14, r24
    7e9a:	ff 24       	eor	r15, r15
    7e9c:	82 d0       	rcall	.+260    	; 0x7fa2 <getch>
    7e9e:	08 2f       	mov	r16, r24
    7ea0:	10 e0       	ldi	r17, 0x00	; 0
    7ea2:	10 2f       	mov	r17, r16
    7ea4:	00 27       	eor	r16, r16
    7ea6:	0e 29       	or	r16, r14
    7ea8:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7eaa:	00 0f       	add	r16, r16
    7eac:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    7eae:	8b d0       	rcall	.+278    	; 0x7fc6 <verifySpace>
    7eb0:	58 01       	movw	r10, r16
    7eb2:	6c c0       	rjmp	.+216    	; 0x7f8c <main+0x18c>
    }
    else if(ch == STK_UNIVERSAL) {
    7eb4:	86 35       	cpi	r24, 0x56	; 86
    7eb6:	21 f4       	brne	.+8      	; 0x7ec0 <main+0xc0>
      // UNIVERSAL command is ignored
      getNch(4);
    7eb8:	84 e0       	ldi	r24, 0x04	; 4
    7eba:	8d d0       	rcall	.+282    	; 0x7fd6 <getNch>
      putch(0x00);
    7ebc:	80 e0       	ldi	r24, 0x00	; 0
    7ebe:	de cf       	rjmp	.-68     	; 0x7e7c <main+0x7c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ec0:	84 36       	cpi	r24, 0x64	; 100
    7ec2:	09 f0       	breq	.+2      	; 0x7ec6 <main+0xc6>
    7ec4:	41 c0       	rjmp	.+130    	; 0x7f48 <main+0x148>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      uint16_t savelength;

      length = getch()<<8;			/* getlen() */
    7ec6:	6d d0       	rcall	.+218    	; 0x7fa2 <getch>
    7ec8:	90 e0       	ldi	r25, 0x00	; 0
    7eca:	18 2f       	mov	r17, r24
    7ecc:	00 27       	eor	r16, r16
      length |= getch();
    7ece:	69 d0       	rcall	.+210    	; 0x7fa2 <getch>
    7ed0:	90 e0       	ldi	r25, 0x00	; 0
    7ed2:	08 2b       	or	r16, r24
    7ed4:	19 2b       	or	r17, r25
      savelength = length;
      desttype = getch();
    7ed6:	65 d0       	rcall	.+202    	; 0x7fa2 <getch>
    7ed8:	d8 2e       	mov	r13, r24
    7eda:	e8 01       	movw	r28, r16
    7edc:	e1 2c       	mov	r14, r1
    7ede:	f1 e0       	ldi	r31, 0x01	; 1
    7ee0:	ff 2e       	mov	r15, r31

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7ee2:	5f d0       	rcall	.+190    	; 0x7fa2 <getch>
    7ee4:	f7 01       	movw	r30, r14
    7ee6:	81 93       	st	Z+, r24
    7ee8:	7f 01       	movw	r14, r30
      while (--length);
    7eea:	21 97       	sbiw	r28, 0x01	; 1
    7eec:	d1 f7       	brne	.-12     	; 0x7ee2 <main+0xe2>

      // Read command terminator, start reply
      verifySpace();
    7eee:	6b d0       	rcall	.+214    	; 0x7fc6 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, uint16_t len)
{
    switch (memtype) {
    7ef0:	f5 e4       	ldi	r31, 0x45	; 69
    7ef2:	df 16       	cp	r13, r31
    7ef4:	09 f4       	brne	.+2      	; 0x7ef8 <main+0xf8>
    7ef6:	ff cf       	rjmp	.-2      	; 0x7ef6 <main+0xf6>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7ef8:	f5 01       	movw	r30, r10
    7efa:	87 be       	out	0x37, r8	; 55
    7efc:	e8 95       	spm
	    boot_spm_busy_wait();
    7efe:	07 b6       	in	r0, 0x37	; 55
    7f00:	00 fc       	sbrc	r0, 0
    7f02:	fd cf       	rjmp	.-6      	; 0x7efe <main+0xfe>
    7f04:	b5 01       	movw	r22, r10
    7f06:	a8 01       	movw	r20, r16
    7f08:	a0 e0       	ldi	r26, 0x00	; 0
    7f0a:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    7f0c:	2c 91       	ld	r18, X
    7f0e:	30 e0       	ldi	r19, 0x00	; 0
		a |= (*bufPtr++) << 8;
    7f10:	11 96       	adiw	r26, 0x01	; 1
    7f12:	8c 91       	ld	r24, X
    7f14:	11 97       	sbiw	r26, 0x01	; 1
    7f16:	90 e0       	ldi	r25, 0x00	; 0
    7f18:	98 2f       	mov	r25, r24
    7f1a:	88 27       	eor	r24, r24
    7f1c:	82 2b       	or	r24, r18
    7f1e:	93 2b       	or	r25, r19
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    7f20:	12 96       	adiw	r26, 0x02	; 2
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f22:	fb 01       	movw	r30, r22
    7f24:	0c 01       	movw	r0, r24
    7f26:	77 be       	out	0x37, r7	; 55
    7f28:	e8 95       	spm
    7f2a:	11 24       	eor	r1, r1
		addrPtr += 2;
    7f2c:	6e 5f       	subi	r22, 0xFE	; 254
    7f2e:	7f 4f       	sbci	r23, 0xFF	; 255
	    } while (len -= 2);
    7f30:	42 50       	subi	r20, 0x02	; 2
    7f32:	50 40       	sbci	r21, 0x00	; 0
    7f34:	59 f7       	brne	.-42     	; 0x7f0c <main+0x10c>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7f36:	f5 01       	movw	r30, r10
    7f38:	97 be       	out	0x37, r9	; 55
    7f3a:	e8 95       	spm
	    boot_spm_busy_wait();
    7f3c:	07 b6       	in	r0, 0x37	; 55
    7f3e:	00 fc       	sbrc	r0, 0
    7f40:	fd cf       	rjmp	.-6      	; 0x7f3c <main+0x13c>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7f42:	c7 be       	out	0x37, r12	; 55
    7f44:	e8 95       	spm
    7f46:	22 c0       	rjmp	.+68     	; 0x7f8c <main+0x18c>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f48:	84 37       	cpi	r24, 0x74	; 116
    7f4a:	91 f4       	brne	.+36     	; 0x7f70 <main+0x170>
      uint8_t desttype;
      length = getch()<<8;			/* getlen() */
    7f4c:	2a d0       	rcall	.+84     	; 0x7fa2 <getch>
    7f4e:	90 e0       	ldi	r25, 0x00	; 0
    7f50:	d8 2f       	mov	r29, r24
    7f52:	cc 27       	eor	r28, r28
      length |= getch();
    7f54:	26 d0       	rcall	.+76     	; 0x7fa2 <getch>
    7f56:	90 e0       	ldi	r25, 0x00	; 0
    7f58:	c8 2b       	or	r28, r24
    7f5a:	d9 2b       	or	r29, r25
      desttype = getch();
    7f5c:	22 d0       	rcall	.+68     	; 0x7fa2 <getch>

      verifySpace();
    7f5e:	33 d0       	rcall	.+102    	; 0x7fc6 <verifySpace>
    7f60:	85 01       	movw	r16, r10
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    7f62:	f8 01       	movw	r30, r16
    7f64:	85 91       	lpm	r24, Z+
    7f66:	8f 01       	movw	r16, r30
    7f68:	14 d0       	rcall	.+40     	; 0x7f92 <putch>
	} while (--length);
    7f6a:	21 97       	sbiw	r28, 0x01	; 1
    7f6c:	d1 f7       	brne	.-12     	; 0x7f62 <main+0x162>
    7f6e:	0e c0       	rjmp	.+28     	; 0x7f8c <main+0x18c>
	  
      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f70:	85 37       	cpi	r24, 0x75	; 117
    7f72:	39 f4       	brne	.+14     	; 0x7f82 <main+0x182>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f74:	28 d0       	rcall	.+80     	; 0x7fc6 <verifySpace>
      putch(SIGNATURE_0);
    7f76:	8e e1       	ldi	r24, 0x1E	; 30
    7f78:	0c d0       	rcall	.+24     	; 0x7f92 <putch>
      putch(SIGNATURE_1);
    7f7a:	85 e9       	ldi	r24, 0x95	; 149
    7f7c:	0a d0       	rcall	.+20     	; 0x7f92 <putch>
      putch(SIGNATURE_2);
    7f7e:	8f e0       	ldi	r24, 0x0F	; 15
    7f80:	7d cf       	rjmp	.-262    	; 0x7e7c <main+0x7c>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f82:	81 35       	cpi	r24, 0x51	; 81
    7f84:	11 f4       	brne	.+4      	; 0x7f8a <main+0x18a>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f86:	88 e0       	ldi	r24, 0x08	; 8
    7f88:	18 d0       	rcall	.+48     	; 0x7fba <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f8a:	1d d0       	rcall	.+58     	; 0x7fc6 <verifySpace>
    }
    putch(STK_OK);
    7f8c:	80 e1       	ldi	r24, 0x10	; 16
    7f8e:	01 d0       	rcall	.+2      	; 0x7f92 <putch>
    7f90:	68 cf       	rjmp	.-304    	; 0x7e62 <main+0x62>

00007f92 <putch>:
  }
}

void putch(char ch) {
    7f92:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f94:	80 91 c0 00 	lds	r24, 0x00C0
    7f98:	85 ff       	sbrs	r24, 5
    7f9a:	fc cf       	rjmp	.-8      	; 0x7f94 <putch+0x2>
  UART_UDR = ch;
    7f9c:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7fa0:	08 95       	ret

00007fa2 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7fa2:	80 91 c0 00 	lds	r24, 0x00C0
    7fa6:	87 ff       	sbrs	r24, 7
    7fa8:	fc cf       	rjmp	.-8      	; 0x7fa2 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7faa:	80 91 c0 00 	lds	r24, 0x00C0
    7fae:	84 fd       	sbrc	r24, 4
    7fb0:	01 c0       	rjmp	.+2      	; 0x7fb4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fb2:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7fb4:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fb8:	08 95       	ret

00007fba <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fba:	e0 e6       	ldi	r30, 0x60	; 96
    7fbc:	f0 e0       	ldi	r31, 0x00	; 0
    7fbe:	98 e1       	ldi	r25, 0x18	; 24
    7fc0:	90 83       	st	Z, r25
  WDTCSR = x;
    7fc2:	80 83       	st	Z, r24
}
    7fc4:	08 95       	ret

00007fc6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fc6:	ed df       	rcall	.-38     	; 0x7fa2 <getch>
    7fc8:	80 32       	cpi	r24, 0x20	; 32
    7fca:	19 f0       	breq	.+6      	; 0x7fd2 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fcc:	88 e0       	ldi	r24, 0x08	; 8
    7fce:	f5 df       	rcall	.-22     	; 0x7fba <watchdogConfig>
    7fd0:	ff cf       	rjmp	.-2      	; 0x7fd0 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fd2:	84 e1       	ldi	r24, 0x14	; 20
}
    7fd4:	de cf       	rjmp	.-68     	; 0x7f92 <putch>

00007fd6 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fd6:	1f 93       	push	r17
    7fd8:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fda:	e3 df       	rcall	.-58     	; 0x7fa2 <getch>
    7fdc:	11 50       	subi	r17, 0x01	; 1
    7fde:	e9 f7       	brne	.-6      	; 0x7fda <getNch+0x4>
  verifySpace();
    7fe0:	f2 df       	rcall	.-28     	; 0x7fc6 <verifySpace>
}
    7fe2:	1f 91       	pop	r17
    7fe4:	08 95       	ret

00007fe6 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fe6:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fe8:	80 e0       	ldi	r24, 0x00	; 0
    7fea:	e7 df       	rcall	.-50     	; 0x7fba <watchdogConfig>
  __asm__ __volatile__ (
    7fec:	ee 27       	eor	r30, r30
    7fee:	ff 27       	eor	r31, r31
    7ff0:	09 94       	ijmp
