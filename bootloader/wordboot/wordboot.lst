
wordboot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007efa  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00007c00  00007c00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001020  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dde  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000216e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007c00 <main>:
    7c00:	1f 92       	push	r1
    7c02:	cd b7       	in	r28, 0x3d	; 61
    7c04:	de b7       	in	r29, 0x3e	; 62
    7c06:	84 b7       	in	r24, 0x34	; 52
    7c08:	14 be       	out	0x34, r1	; 52
    7c0a:	88 e1       	ldi	r24, 0x18	; 24
    7c0c:	0f b6       	in	r0, 0x3f	; 63
    7c0e:	f8 94       	cli
    7c10:	80 93 60 00 	sts	0x0060, r24
    7c14:	10 92 60 00 	sts	0x0060, r1
    7c18:	0f be       	out	0x3f, r0	; 63
    7c1a:	94 e0       	ldi	r25, 0x04	; 4
    7c1c:	95 bd       	out	0x25, r25	; 37
    7c1e:	95 e0       	ldi	r25, 0x05	; 5
    7c20:	90 93 81 00 	sts	0x0081, r25
    7c24:	92 e0       	ldi	r25, 0x02	; 2
    7c26:	90 93 c0 00 	sts	0x00C0, r25
    7c2a:	80 93 c1 00 	sts	0x00C1, r24
    7c2e:	86 e0       	ldi	r24, 0x06	; 6
    7c30:	80 93 c2 00 	sts	0x00C2, r24
    7c34:	88 e0       	ldi	r24, 0x08	; 8
    7c36:	90 e0       	ldi	r25, 0x00	; 0
    7c38:	90 93 c5 00 	sts	0x00C5, r25
    7c3c:	80 93 c4 00 	sts	0x00C4, r24
    7c40:	81 e0       	ldi	r24, 0x01	; 1
    7c42:	84 b9       	out	0x04, r24	; 4
    7c44:	85 b9       	out	0x05, r24	; 5
    7c46:	8c e0       	ldi	r24, 0x0C	; 12
    7c48:	87 b9       	out	0x07, r24	; 7
    7c4a:	88 b9       	out	0x08, r24	; 8
    7c4c:	80 e8       	ldi	r24, 0x80	; 128
    7c4e:	8a b9       	out	0x0a, r24	; 10
    7c50:	8b b9       	out	0x0b, r24	; 11
    7c52:	8a b1       	in	r24, 0x0a	; 10
    7c54:	88 66       	ori	r24, 0x68	; 104
    7c56:	8a b9       	out	0x0a, r24	; 10
    7c58:	84 b1       	in	r24, 0x04	; 4
    7c5a:	8c 62       	ori	r24, 0x2C	; 44
    7c5c:	84 b9       	out	0x04, r24	; 4
    7c5e:	2a 9a       	sbi	0x05, 2	; 5
    7c60:	88 e5       	ldi	r24, 0x58	; 88
    7c62:	8c bd       	out	0x2c, r24	; 44
    7c64:	83 e0       	ldi	r24, 0x03	; 3
    7c66:	1e bc       	out	0x2e, r1	; 46
    7c68:	0d b4       	in	r0, 0x2d	; 45
    7c6a:	07 fe       	sbrs	r0, 7
    7c6c:	fd cf       	rjmp	.-6      	; 0x7c68 <main+0x68>
    7c6e:	81 50       	subi	r24, 0x01	; 1
    7c70:	d1 f7       	brne	.-12     	; 0x7c66 <main+0x66>
    7c72:	2a 98       	cbi	0x05, 2	; 5
    7c74:	2a 9a       	sbi	0x05, 2	; 5
    7c76:	86 e0       	ldi	r24, 0x06	; 6
    7c78:	28 e1       	ldi	r18, 0x18	; 24
    7c7a:	3e ef       	ldi	r19, 0xFE	; 254
    7c7c:	41 e0       	ldi	r20, 0x01	; 1
    7c7e:	98 e6       	ldi	r25, 0x68	; 104
    7c80:	30 93 85 00 	sts	0x0085, r19
    7c84:	20 93 84 00 	sts	0x0084, r18
    7c88:	46 bb       	out	0x16, r20	; 22
    7c8a:	b0 9b       	sbis	0x16, 0	; 22
    7c8c:	fe cf       	rjmp	.-4      	; 0x7c8a <main+0x8a>
    7c8e:	99 b9       	out	0x09, r25	; 9
    7c90:	a8 95       	wdr
    7c92:	81 50       	subi	r24, 0x01	; 1
    7c94:	a9 f7       	brne	.-22     	; 0x7c80 <main+0x80>
    7c96:	21 2c       	mov	r2, r1
    7c98:	31 2c       	mov	r3, r1
    7c9a:	08 e1       	ldi	r16, 0x18	; 24
    7c9c:	10 e0       	ldi	r17, 0x00	; 0
    7c9e:	38 e0       	ldi	r19, 0x08	; 8
    7ca0:	f3 2e       	mov	r15, r19
    7ca2:	43 e0       	ldi	r20, 0x03	; 3
    7ca4:	e4 2e       	mov	r14, r20
    7ca6:	dd 24       	eor	r13, r13
    7ca8:	d3 94       	inc	r13
    7caa:	55 e0       	ldi	r21, 0x05	; 5
    7cac:	c5 2e       	mov	r12, r21
    7cae:	61 e1       	ldi	r22, 0x11	; 17
    7cb0:	96 2e       	mov	r9, r22
    7cb2:	d6 d0       	rcall	.+428    	; 0x7e60 <get_ch>
    7cb4:	81 34       	cpi	r24, 0x41	; 65
    7cb6:	69 f4       	brne	.+26     	; 0x7cd2 <main+0xd2>
    7cb8:	d3 d0       	rcall	.+422    	; 0x7e60 <get_ch>
    7cba:	89 83       	std	Y+1, r24	; 0x01
    7cbc:	f0 d0       	rcall	.+480    	; 0x7e9e <verify_command_terminator>
    7cbe:	89 81       	ldd	r24, Y+1	; 0x01
    7cc0:	82 38       	cpi	r24, 0x82	; 130
    7cc2:	f9 f0       	breq	.+62     	; 0x7d02 <main+0x102>
    7cc4:	81 38       	cpi	r24, 0x81	; 129
    7cc6:	11 f4       	brne	.+4      	; 0x7ccc <main+0xcc>
    7cc8:	86 e0       	ldi	r24, 0x06	; 6
    7cca:	01 c0       	rjmp	.+2      	; 0x7cce <main+0xce>
    7ccc:	83 e0       	ldi	r24, 0x03	; 3
    7cce:	a3 d0       	rcall	.+326    	; 0x7e16 <put_ch>
    7cd0:	9f c0       	rjmp	.+318    	; 0x7e10 <main+0x210>
    7cd2:	82 34       	cpi	r24, 0x42	; 66
    7cd4:	11 f4       	brne	.+4      	; 0x7cda <main+0xda>
    7cd6:	84 e1       	ldi	r24, 0x14	; 20
    7cd8:	03 c0       	rjmp	.+6      	; 0x7ce0 <main+0xe0>
    7cda:	85 34       	cpi	r24, 0x45	; 69
    7cdc:	19 f4       	brne	.+6      	; 0x7ce4 <main+0xe4>
    7cde:	85 e0       	ldi	r24, 0x05	; 5
    7ce0:	ef d0       	rcall	.+478    	; 0x7ec0 <drop_ch>
    7ce2:	96 c0       	rjmp	.+300    	; 0x7e10 <main+0x210>
    7ce4:	85 35       	cpi	r24, 0x55	; 85
    7ce6:	49 f4       	brne	.+18     	; 0x7cfa <main+0xfa>
    7ce8:	bb d0       	rcall	.+374    	; 0x7e60 <get_ch>
    7cea:	b8 2e       	mov	r11, r24
    7cec:	b9 d0       	rcall	.+370    	; 0x7e60 <get_ch>
    7cee:	2b 2c       	mov	r2, r11
    7cf0:	31 2c       	mov	r3, r1
    7cf2:	38 2a       	or	r3, r24
    7cf4:	22 0c       	add	r2, r2
    7cf6:	33 1c       	adc	r3, r3
    7cf8:	8a c0       	rjmp	.+276    	; 0x7e0e <main+0x20e>
    7cfa:	86 35       	cpi	r24, 0x56	; 86
    7cfc:	21 f4       	brne	.+8      	; 0x7d06 <main+0x106>
    7cfe:	84 e0       	ldi	r24, 0x04	; 4
    7d00:	df d0       	rcall	.+446    	; 0x7ec0 <drop_ch>
    7d02:	80 e0       	ldi	r24, 0x00	; 0
    7d04:	e4 cf       	rjmp	.-56     	; 0x7cce <main+0xce>
    7d06:	84 36       	cpi	r24, 0x64	; 100
    7d08:	09 f0       	breq	.+2      	; 0x7d0c <main+0x10c>
    7d0a:	4d c0       	rjmp	.+154    	; 0x7da6 <main+0x1a6>
    7d0c:	a9 d0       	rcall	.+338    	; 0x7e60 <get_ch>
    7d0e:	a8 d0       	rcall	.+336    	; 0x7e60 <get_ch>
    7d10:	88 2e       	mov	r8, r24
    7d12:	a8 2e       	mov	r10, r24
    7d14:	b1 2c       	mov	r11, r1
    7d16:	a4 d0       	rcall	.+328    	; 0x7e60 <get_ch>
    7d18:	58 2e       	mov	r5, r24
    7d1a:	61 2c       	mov	r6, r1
    7d1c:	77 24       	eor	r7, r7
    7d1e:	73 94       	inc	r7
    7d20:	9f d0       	rcall	.+318    	; 0x7e60 <get_ch>
    7d22:	f3 01       	movw	r30, r6
    7d24:	81 93       	st	Z+, r24
    7d26:	3f 01       	movw	r6, r30
    7d28:	f1 e0       	ldi	r31, 0x01	; 1
    7d2a:	af 1a       	sub	r10, r31
    7d2c:	b1 08       	sbc	r11, r1
    7d2e:	c1 f7       	brne	.-16     	; 0x7d20 <main+0x120>
    7d30:	b6 d0       	rcall	.+364    	; 0x7e9e <verify_command_terminator>
    7d32:	85 e4       	ldi	r24, 0x45	; 69
    7d34:	58 12       	cpse	r5, r24
    7d36:	10 c0       	rjmp	.+32     	; 0x7d58 <main+0x158>
    7d38:	31 01       	movw	r6, r2
    7d3a:	a1 2c       	mov	r10, r1
    7d3c:	bb 24       	eor	r11, r11
    7d3e:	b3 94       	inc	r11
    7d40:	8a 14       	cp	r8, r10
    7d42:	09 f4       	brne	.+2      	; 0x7d46 <main+0x146>
    7d44:	65 c0       	rjmp	.+202    	; 0x7e10 <main+0x210>
    7d46:	f5 01       	movw	r30, r10
    7d48:	61 91       	ld	r22, Z+
    7d4a:	5f 01       	movw	r10, r30
    7d4c:	c3 01       	movw	r24, r6
    7d4e:	c7 d0       	rcall	.+398    	; 0x7ede <__eewr_byte_m328p>
    7d50:	ff ef       	ldi	r31, 0xFF	; 255
    7d52:	6f 1a       	sub	r6, r31
    7d54:	7f 0a       	sbc	r7, r31
    7d56:	f4 cf       	rjmp	.-24     	; 0x7d40 <main+0x140>
    7d58:	f1 01       	movw	r30, r2
    7d5a:	e0 92 57 00 	sts	0x0057, r14
    7d5e:	e8 95       	spm
    7d60:	07 b6       	in	r0, 0x37	; 55
    7d62:	00 fc       	sbrc	r0, 0
    7d64:	fd cf       	rjmp	.-6      	; 0x7d60 <main+0x160>
    7d66:	a1 01       	movw	r20, r2
    7d68:	a0 e0       	ldi	r26, 0x00	; 0
    7d6a:	b1 e0       	ldi	r27, 0x01	; 1
    7d6c:	2c 91       	ld	r18, X
    7d6e:	12 96       	adiw	r26, 0x02	; 2
    7d70:	cd 01       	movw	r24, r26
    7d72:	01 97       	sbiw	r24, 0x01	; 1
    7d74:	fc 01       	movw	r30, r24
    7d76:	80 81       	ld	r24, Z
    7d78:	30 e0       	ldi	r19, 0x00	; 0
    7d7a:	38 2b       	or	r19, r24
    7d7c:	fa 01       	movw	r30, r20
    7d7e:	09 01       	movw	r0, r18
    7d80:	d0 92 57 00 	sts	0x0057, r13
    7d84:	e8 95       	spm
    7d86:	11 24       	eor	r1, r1
    7d88:	4e 5f       	subi	r20, 0xFE	; 254
    7d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d8c:	8a 12       	cpse	r8, r26
    7d8e:	ee cf       	rjmp	.-36     	; 0x7d6c <main+0x16c>
    7d90:	f1 01       	movw	r30, r2
    7d92:	c0 92 57 00 	sts	0x0057, r12
    7d96:	e8 95       	spm
    7d98:	07 b6       	in	r0, 0x37	; 55
    7d9a:	00 fc       	sbrc	r0, 0
    7d9c:	fd cf       	rjmp	.-6      	; 0x7d98 <main+0x198>
    7d9e:	90 92 57 00 	sts	0x0057, r9
    7da2:	e8 95       	spm
    7da4:	35 c0       	rjmp	.+106    	; 0x7e10 <main+0x210>
    7da6:	84 37       	cpi	r24, 0x74	; 116
    7da8:	f9 f4       	brne	.+62     	; 0x7de8 <main+0x1e8>
    7daa:	5a d0       	rcall	.+180    	; 0x7e60 <get_ch>
    7dac:	59 d0       	rcall	.+178    	; 0x7e60 <get_ch>
    7dae:	88 2e       	mov	r8, r24
    7db0:	57 d0       	rcall	.+174    	; 0x7e60 <get_ch>
    7db2:	89 83       	std	Y+1, r24	; 0x01
    7db4:	74 d0       	rcall	.+232    	; 0x7e9e <verify_command_terminator>
    7db6:	82 0c       	add	r8, r2
    7db8:	89 81       	ldd	r24, Y+1	; 0x01
    7dba:	85 34       	cpi	r24, 0x45	; 69
    7dbc:	51 f4       	brne	.+20     	; 0x7dd2 <main+0x1d2>
    7dbe:	51 01       	movw	r10, r2
    7dc0:	c5 01       	movw	r24, r10
    7dc2:	85 d0       	rcall	.+266    	; 0x7ece <__eerd_byte_m328p>
    7dc4:	28 d0       	rcall	.+80     	; 0x7e16 <put_ch>
    7dc6:	ff ef       	ldi	r31, 0xFF	; 255
    7dc8:	af 1a       	sub	r10, r31
    7dca:	bf 0a       	sbc	r11, r31
    7dcc:	8a 10       	cpse	r8, r10
    7dce:	f8 cf       	rjmp	.-16     	; 0x7dc0 <main+0x1c0>
    7dd0:	1f c0       	rjmp	.+62     	; 0x7e10 <main+0x210>
    7dd2:	f1 01       	movw	r30, r2
    7dd4:	5f 01       	movw	r10, r30
    7dd6:	8f ef       	ldi	r24, 0xFF	; 255
    7dd8:	a8 1a       	sub	r10, r24
    7dda:	b8 0a       	sbc	r11, r24
    7ddc:	84 91       	lpm	r24, Z
    7dde:	1b d0       	rcall	.+54     	; 0x7e16 <put_ch>
    7de0:	f5 01       	movw	r30, r10
    7de2:	8a 10       	cpse	r8, r10
    7de4:	f7 cf       	rjmp	.-18     	; 0x7dd4 <main+0x1d4>
    7de6:	14 c0       	rjmp	.+40     	; 0x7e10 <main+0x210>
    7de8:	85 37       	cpi	r24, 0x75	; 117
    7dea:	39 f4       	brne	.+14     	; 0x7dfa <main+0x1fa>
    7dec:	58 d0       	rcall	.+176    	; 0x7e9e <verify_command_terminator>
    7dee:	8e e1       	ldi	r24, 0x1E	; 30
    7df0:	12 d0       	rcall	.+36     	; 0x7e16 <put_ch>
    7df2:	85 e9       	ldi	r24, 0x95	; 149
    7df4:	10 d0       	rcall	.+32     	; 0x7e16 <put_ch>
    7df6:	8f e0       	ldi	r24, 0x0F	; 15
    7df8:	6a cf       	rjmp	.-300    	; 0x7cce <main+0xce>
    7dfa:	81 35       	cpi	r24, 0x51	; 81
    7dfc:	41 f4       	brne	.+16     	; 0x7e0e <main+0x20e>
    7dfe:	0f b6       	in	r0, 0x3f	; 63
    7e00:	f8 94       	cli
    7e02:	a8 95       	wdr
    7e04:	00 93 60 00 	sts	0x0060, r16
    7e08:	0f be       	out	0x3f, r0	; 63
    7e0a:	f0 92 60 00 	sts	0x0060, r15
    7e0e:	47 d0       	rcall	.+142    	; 0x7e9e <verify_command_terminator>
    7e10:	80 e1       	ldi	r24, 0x10	; 16
    7e12:	01 d0       	rcall	.+2      	; 0x7e16 <put_ch>
    7e14:	4e cf       	rjmp	.-356    	; 0x7cb2 <main+0xb2>

00007e16 <put_ch>:
}

void put_ch(char ch)
{

    while (!(UCSR0A & _BV(UDRE0)));
    7e16:	90 91 c0 00 	lds	r25, 0x00C0
    7e1a:	95 ff       	sbrs	r25, 5
    7e1c:	fc cf       	rjmp	.-8      	; 0x7e16 <put_ch>
    UDR0 = ch;
    7e1e:	80 93 c6 00 	sts	0x00C6, r24
    7e22:	08 95       	ret

00007e24 <start_application>:

void start_application(uint8_t reset_flags)
{

    // Reset I/O registers
    DDRB = 0;
    7e24:	14 b8       	out	0x04, r1	; 4
    PORTB = 0;
    7e26:	15 b8       	out	0x05, r1	; 5

    DDRC = 0;
    7e28:	17 b8       	out	0x07, r1	; 7
    PORTC = 0;
    7e2a:	18 b8       	out	0x08, r1	; 8

    DDRD = 0;
    7e2c:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0;
    7e2e:	1b b8       	out	0x0b, r1	; 11
    PIND = 0;
    7e30:	19 b8       	out	0x09, r1	; 9

    // Reset UART module
    UCSR0A = 0;
    7e32:	10 92 c0 00 	sts	0x00C0, r1
    UCSR0B = 0;
    7e36:	10 92 c1 00 	sts	0x00C1, r1
    UCSR0C = 0;
    7e3a:	10 92 c2 00 	sts	0x00C2, r1
    UBRR0 = 0;
    7e3e:	10 92 c5 00 	sts	0x00C5, r1
    7e42:	10 92 c4 00 	sts	0x00C4, r1

    // Reset Timer0
    TCCR0B = 0;
    7e46:	15 bc       	out	0x25, r1	; 37
    TCNT0 = 0;
    7e48:	16 bc       	out	0x26, r1	; 38

    // Reset Timer1
    TCCR1B = 0;
    7e4a:	10 92 81 00 	sts	0x0081, r1
    TCNT1 = 0;
    7e4e:	10 92 85 00 	sts	0x0085, r1
    7e52:	10 92 84 00 	sts	0x0084, r1

    // Reset SPI module
    SPCR = 0;
    7e56:	1c bc       	out	0x2c, r1	; 44

    // Save the reset flags in the designated register
    // This can be accessed in a main program by putting code in .init0 (which
    // executes before normal C init code) to save R2 to a global variable.
    __asm__ __volatile__ ("mov r2, %0\n" :: "r" (reset_flags));
    7e58:	28 2e       	mov	r2, r24

    // Jump to reset vector
    ((void(*)(void)) 0x0000)();
    7e5a:	e0 e0       	ldi	r30, 0x00	; 0
    7e5c:	f0 e0       	ldi	r31, 0x00	; 0
    7e5e:	09 95       	icall

00007e60 <get_ch>:

#define BOOTLOADER_TIMEOUT_MS 1000
#define BOOTLOADER_TIMEOUT_COMPARE_VALUE F_CPU / 256 / 256 * 1000 / BOOTLOADER_TIMEOUT_MS

uint8_t get_ch()
{
    7e60:	cf 93       	push	r28
    7e62:	df 93       	push	r29

    uint8_t ch;

    #ifdef LED_DATA_FLASH

        PIND = _BV(PD6) | _BV(PD5) | _BV(PD3);
    7e64:	88 e6       	ldi	r24, 0x68	; 104
    7e66:	89 b9       	out	0x09, r24	; 9

    #endif

    uint8_t counter = 0;
    7e68:	c0 e0       	ldi	r28, 0x00	; 0
    while(!(UCSR0A & _BV(RXC0))) {

        if (TIFR0 & _BV(TOV0)) {

            counter++;
            TIFR0 = _BV(TOV0);
    7e6a:	d1 e0       	ldi	r29, 0x01	; 1

    #endif

    uint8_t counter = 0;

    while(!(UCSR0A & _BV(RXC0))) {
    7e6c:	80 91 c0 00 	lds	r24, 0x00C0
    7e70:	87 fd       	sbrc	r24, 7
    7e72:	09 c0       	rjmp	.+18     	; 0x7e86 <get_ch+0x26>

        if (TIFR0 & _BV(TOV0)) {
    7e74:	a8 9b       	sbis	0x15, 0	; 21
    7e76:	02 c0       	rjmp	.+4      	; 0x7e7c <get_ch+0x1c>

            counter++;
    7e78:	cf 5f       	subi	r28, 0xFF	; 255
            TIFR0 = _BV(TOV0);
    7e7a:	d5 bb       	out	0x15, r29	; 21

        }

        if (counter > BOOTLOADER_TIMEOUT_COMPARE_VALUE) {
    7e7c:	cb 37       	cpi	r28, 0x7B	; 123
    7e7e:	b0 f3       	brcs	.-20     	; 0x7e6c <get_ch+0xc>

            start_application(0);
    7e80:	80 e0       	ldi	r24, 0x00	; 0
    7e82:	d0 df       	rcall	.-96     	; 0x7e24 <start_application>
    7e84:	f3 cf       	rjmp	.-26     	; 0x7e6c <get_ch+0xc>
    7e86:	80 91 c0 00 	lds	r24, 0x00C0
     * expects to be talking to the application, and DON'T reset the
     * watchdog.  This should cause the bootloader to abort and run
     * the application "soon", if it keeps happening.  (Note that we
     * don't care that an invalid char is returned...)
     */
    if (!(UCSR0A & _BV(FE0))) {
    7e8a:	84 fd       	sbrc	r24, 4
    7e8c:	01 c0       	rjmp	.+2      	; 0x7e90 <get_ch+0x30>
    7e8e:	a8 95       	wdr

        wdt_reset();
    7e90:	80 91 c6 00 	lds	r24, 0x00C6

    }

    ch = UDR0;
    7e94:	98 e6       	ldi	r25, 0x68	; 104

    #ifdef LED_DATA_FLASH

        PIND = _BV(PD6) | _BV(PD5) | _BV(PD3);
    7e96:	99 b9       	out	0x09, r25	; 9
    7e98:	df 91       	pop	r29

    #endif

    return ch;

}
    7e9a:	cf 91       	pop	r28
    7e9c:	08 95       	ret

00007e9e <verify_command_terminator>:
}

void verify_command_terminator()
{

    if (get_ch() == Sync_CRC_EOP){
    7e9e:	e0 df       	rcall	.-64     	; 0x7e60 <get_ch>
    7ea0:	80 32       	cpi	r24, 0x20	; 32
    7ea2:	11 f4       	brne	.+4      	; 0x7ea8 <verify_command_terminator+0xa>
    7ea4:	84 e1       	ldi	r24, 0x14	; 20

        put_ch(Resp_STK_INSYNC);
    7ea6:	b7 cf       	rjmp	.-146    	; 0x7e16 <put_ch>
    7ea8:	28 e0       	ldi	r18, 0x08	; 8
    7eaa:	88 e1       	ldi	r24, 0x18	; 24

    } else {

        wdt_enable(WDTO_15MS);
    7eac:	90 e0       	ldi	r25, 0x00	; 0
    7eae:	0f b6       	in	r0, 0x3f	; 63
    7eb0:	f8 94       	cli
    7eb2:	a8 95       	wdr
    7eb4:	80 93 60 00 	sts	0x0060, r24
    7eb8:	0f be       	out	0x3f, r0	; 63
    7eba:	20 93 60 00 	sts	0x0060, r18
    7ebe:	ff cf       	rjmp	.-2      	; 0x7ebe <verify_command_terminator+0x20>

00007ec0 <drop_ch>:
    return ch;

}

void drop_ch(uint8_t count)
{
    7ec0:	cf 93       	push	r28
    7ec2:	c8 2f       	mov	r28, r24

    do {

        get_ch();
    7ec4:	cd df       	rcall	.-102    	; 0x7e60 <get_ch>
    7ec6:	c1 50       	subi	r28, 0x01	; 1

    } while (--count);
    7ec8:	e9 f7       	brne	.-6      	; 0x7ec4 <drop_ch+0x4>
    7eca:	cf 91       	pop	r28

    verify_command_terminator();

}
    7ecc:	e8 cf       	rjmp	.-48     	; 0x7e9e <verify_command_terminator>

00007ece <__eerd_byte_m328p>:
    7ece:	f9 99       	sbic	0x1f, 1	; 31
    7ed0:	fe cf       	rjmp	.-4      	; 0x7ece <__eerd_byte_m328p>
    7ed2:	92 bd       	out	0x22, r25	; 34
    7ed4:	81 bd       	out	0x21, r24	; 33
    7ed6:	f8 9a       	sbi	0x1f, 0	; 31
    7ed8:	99 27       	eor	r25, r25
    7eda:	80 b5       	in	r24, 0x20	; 32
    7edc:	08 95       	ret

00007ede <__eewr_byte_m328p>:
    7ede:	26 2f       	mov	r18, r22

00007ee0 <__eewr_r18_m328p>:
    7ee0:	f9 99       	sbic	0x1f, 1	; 31
    7ee2:	fe cf       	rjmp	.-4      	; 0x7ee0 <__eewr_r18_m328p>
    7ee4:	1f ba       	out	0x1f, r1	; 31
    7ee6:	92 bd       	out	0x22, r25	; 34
    7ee8:	81 bd       	out	0x21, r24	; 33
    7eea:	20 bd       	out	0x20, r18	; 32
    7eec:	0f b6       	in	r0, 0x3f	; 63
    7eee:	f8 94       	cli
    7ef0:	fa 9a       	sbi	0x1f, 2	; 31
    7ef2:	f9 9a       	sbi	0x1f, 1	; 31
    7ef4:	0f be       	out	0x3f, r0	; 63
    7ef6:	01 96       	adiw	r24, 0x01	; 1
    7ef8:	08 95       	ret
